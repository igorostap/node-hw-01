{"ast":null,"code":"var _jsxFileName = \"/home/ihor/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/goit-react-hw-02-feedback/src/components/App.jsx\";\nimport { Component } from 'react';\nimport Statistics from './Statistics';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      good: 0,\n      neutral: 0,\n      bad: 0\n    };\n\n    this.incrementGood = () => {\n      this.setState(prevState => {\n        return {\n          good: prevState.good + 1\n        };\n      });\n    };\n\n    this.incrementNeutral = () => {\n      this.setState(prevState => {\n        return {\n          neutral: prevState.neutral + 1\n        };\n      });\n    };\n\n    this.incrementBad = () => {\n      this.setState(prevState => {\n        return {\n          bad: prevState.bad + 1\n        };\n      });\n    };\n\n    this.onFeedbackHandle = evt => {\n      const stateName = evt.currentTarget.name;\n      this.setState(prev => ({\n        [stateName]: prev[stateName] + 1\n      }));\n    };\n\n    this.countTotalFeedback = () => {\n      return this.state.good + this.state.neutral + this.state.bad;\n    };\n\n    this.countPositiveFeedbackPercentage = () => Math.round(this.state.good / this.countTotalFeedback() * 100);\n  }\n\n  render() {\n    const {\n      good,\n      neutral,\n      bad\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Statistics, {\n        good: good,\n        neutral: neutral,\n        bad: bad,\n        total: this.countTotalFeedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n;","map":{"version":3,"names":["Component","Statistics","App","state","good","neutral","bad","incrementGood","setState","prevState","incrementNeutral","incrementBad","onFeedbackHandle","evt","stateName","currentTarget","name","prev","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","render"],"sources":["/home/ihor/Рабочий стол/goit-react-hw-02-feedback/src/components/App.jsx"],"sourcesContent":["import { Component } from 'react';\nimport Statistics from './Statistics';\n\nexport class App extends Component  {\n   state = {\n        good: 0,\n        neutral: 0,\n        bad: 0\n    };\n    incrementGood = () => {\n       \n        this.setState(prevState => {\n            return {\n                good: prevState.good + 1,\n            \n            };\n            \n        });\n    };\n    incrementNeutral = () => {\n        this.setState(prevState => {\n            return {\n                neutral: prevState.neutral+1,\n            };\n            \n        });\n    };\n    incrementBad = () => {\n        this.setState(prevState => {\n            \n            return {\n                bad: prevState.bad+1,\n            };\n            \n        });\n    };\n    onFeedbackHandle = (evt) => {\n    const stateName = evt.currentTarget.name;\n    this.setState(prev => ({ [stateName]: prev[stateName] + 1 }));\n  }\n    countTotalFeedback = () => {\n        return (this.state.good + this.state.neutral + this.state.bad);\n    };\n    countPositiveFeedbackPercentage = () => (Math.round(this.state.good / this.countTotalFeedback() * 100));\n    \n\n\n\n  render() {\n    const { good, neutral, bad } = this.state;\n  return (\n    <div>\n      <Statistics\n        good={good}\n        neutral={neutral}\n        bad={bad}\n        total={this.countTotalFeedback}\n       />\n    </div>\n    \n  );\n}\n  \n};\n"],"mappings":";AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,UAAP,MAAuB,cAAvB;;AAEA,OAAO,MAAMC,GAAN,SAAkBF,SAAlB,CAA6B;EAAA;IAAA;IAAA,KACjCG,KADiC,GACzB;MACHC,IAAI,EAAE,CADH;MAEHC,OAAO,EAAE,CAFN;MAGHC,GAAG,EAAE;IAHF,CADyB;;IAAA,KAMhCC,aANgC,GAMhB,MAAM;MAElB,KAAKC,QAAL,CAAcC,SAAS,IAAI;QACvB,OAAO;UACHL,IAAI,EAAEK,SAAS,CAACL,IAAV,GAAiB;QADpB,CAAP;MAKH,CAND;IAOH,CAf+B;;IAAA,KAgBhCM,gBAhBgC,GAgBb,MAAM;MACrB,KAAKF,QAAL,CAAcC,SAAS,IAAI;QACvB,OAAO;UACHJ,OAAO,EAAEI,SAAS,CAACJ,OAAV,GAAkB;QADxB,CAAP;MAIH,CALD;IAMH,CAvB+B;;IAAA,KAwBhCM,YAxBgC,GAwBjB,MAAM;MACjB,KAAKH,QAAL,CAAcC,SAAS,IAAI;QAEvB,OAAO;UACHH,GAAG,EAAEG,SAAS,CAACH,GAAV,GAAc;QADhB,CAAP;MAIH,CAND;IAOH,CAhC+B;;IAAA,KAiChCM,gBAjCgC,GAiCZC,GAAD,IAAS;MAC5B,MAAMC,SAAS,GAAGD,GAAG,CAACE,aAAJ,CAAkBC,IAApC;MACA,KAAKR,QAAL,CAAcS,IAAI,KAAK;QAAE,CAACH,SAAD,GAAaG,IAAI,CAACH,SAAD,CAAJ,GAAkB;MAAjC,CAAL,CAAlB;IACD,CApCiC;;IAAA,KAqChCI,kBArCgC,GAqCX,MAAM;MACvB,OAAQ,KAAKf,KAAL,CAAWC,IAAX,GAAkB,KAAKD,KAAL,CAAWE,OAA7B,GAAuC,KAAKF,KAAL,CAAWG,GAA1D;IACH,CAvC+B;;IAAA,KAwChCa,+BAxCgC,GAwCE,MAAOC,IAAI,CAACC,KAAL,CAAW,KAAKlB,KAAL,CAAWC,IAAX,GAAkB,KAAKc,kBAAL,EAAlB,GAA8C,GAAzD,CAxCT;EAAA;;EA6ClCI,MAAM,GAAG;IACP,MAAM;MAAElB,IAAF;MAAQC,OAAR;MAAiBC;IAAjB,IAAyB,KAAKH,KAApC;IACF,oBACE;MAAA,uBACE,QAAC,UAAD;QACE,IAAI,EAAEC,IADR;QAEE,OAAO,EAAEC,OAFX;QAGE,GAAG,EAAEC,GAHP;QAIE,KAAK,EAAE,KAAKY;MAJd;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QADF;EAWD;;AA1DmC;AA4DnC"},"metadata":{},"sourceType":"module"}