{"ast":null,"code":"var _jsxFileName = \"/home/ihor/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/goit-react-hw-06-phonebook/src/components/InputForm/InputForm.js\",\n    _s = $RefreshSig$();\n\nimport { InputItem } from \"./inputForm.styled\";\nimport { Formik, Form } from 'formik';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from '../../Redux/ContactsSlice';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function InputForm() {\n  _s();\n\n  const contacts = useSelector(store => store.contacts.items);\n  const dispatch = useDispatch();\n\n  const onSubmit = (values, action) => {\n    const contName = contacts.find(el => el.name.toLowerCase() === values.name.toLowerCase());\n    if (contName) return alert(contName.name + \" is already in contacts\");\n    values.id = nanoid();\n    dispatch(addContact(values));\n    action.resetForm();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      name: '',\n      number: ''\n    },\n    onSubmit: onSubmit,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(InputItem, {\n          type: \"text\",\n          name: \"name\",\n          pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n          title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Number\", /*#__PURE__*/_jsxDEV(InputItem, {\n          type: \"tel\",\n          name: \"number\",\n          pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",\n          title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 13\n  }, this);\n}\n\n_s(InputForm, \"k1PFgZY3xE9F3u4VjgAv2j4HxqE=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = InputForm;\nInputForm.propTypes = {\n  submitHandle: PropTypes.func\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"InputForm\");","map":{"version":3,"names":["InputItem","Formik","Form","PropTypes","useSelector","useDispatch","addContact","nanoid","InputForm","contacts","store","items","dispatch","onSubmit","values","action","contName","find","el","name","toLowerCase","alert","id","resetForm","number","propTypes","submitHandle","func"],"sources":["/home/ihor/Рабочий стол/goit-react-hw-06-phonebook/src/components/InputForm/InputForm.js"],"sourcesContent":["import { InputItem } from \"./inputForm.styled\";\nimport { Formik, Form } from 'formik';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from '../../Redux/ContactsSlice';\nimport { nanoid } from 'nanoid';\n\nexport function InputForm() {\n    const contacts = useSelector(store => store.contacts.items);\n    const dispatch = useDispatch();\n\n    const onSubmit = (values, action) => {\n        const contName = contacts.find(el => (el.name.toLowerCase() === values.name.toLowerCase()));\n        if (contName) return alert(contName.name + \" is already in contacts\");\n        values.id = nanoid();\n        dispatch(addContact(values));\n        action.resetForm();\n    };\n    return (\n            <Formik initialValues={{ name:'', number:'' }}\n            onSubmit={onSubmit}>\n            <Form><label>Name\n                <InputItem\n                    type=\"text\"\n                    name=\"name\"\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                   \n                /></label>\n                <label>Number<InputItem\n                    type=\"tel\"\n                    name=\"number\"\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                   \n                    /></label>\n                    <button type=\"submit\">Add contact</button>\n                \n                </Form>\n                </Formik>\n        )\n    }\n\nInputForm.propTypes = {\n  submitHandle: PropTypes.func\n}\n"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,OAAO,SAASC,SAAT,GAAqB;EAAA;;EACxB,MAAMC,QAAQ,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACD,QAAN,CAAeE,KAAzB,CAA5B;EACA,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;;EAEA,MAAMQ,QAAQ,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoB;IACjC,MAAMC,QAAQ,GAAGP,QAAQ,CAACQ,IAAT,CAAcC,EAAE,IAAKA,EAAE,CAACC,IAAH,CAAQC,WAAR,OAA0BN,MAAM,CAACK,IAAP,CAAYC,WAAZ,EAA/C,CAAjB;IACA,IAAIJ,QAAJ,EAAc,OAAOK,KAAK,CAACL,QAAQ,CAACG,IAAT,GAAgB,yBAAjB,CAAZ;IACdL,MAAM,CAACQ,EAAP,GAAYf,MAAM,EAAlB;IACAK,QAAQ,CAACN,UAAU,CAACQ,MAAD,CAAX,CAAR;IACAC,MAAM,CAACQ,SAAP;EACH,CAND;;EAOA,oBACQ,QAAC,MAAD;IAAQ,aAAa,EAAE;MAAEJ,IAAI,EAAC,EAAP;MAAWK,MAAM,EAAC;IAAlB,CAAvB;IACA,QAAQ,EAAEX,QADV;IAAA,uBAEA,QAAC,IAAD;MAAA,wBAAM;QAAA,gCACF,QAAC,SAAD;UACI,IAAI,EAAC,MADT;UAEI,IAAI,EAAC,MAFT;UAGI,OAAO,EAAC,wHAHZ;UAII,KAAK,EAAC,wIAJV;UAKI,QAAQ;QALZ;UAAA;UAAA;UAAA;QAAA,QADE;MAAA;QAAA;QAAA;QAAA;MAAA,QAAN,eASI;QAAA,kCAAa,QAAC,SAAD;UACT,IAAI,EAAC,KADI;UAET,IAAI,EAAC,QAFI;UAGT,OAAO,EAAC,wFAHC;UAIT,KAAK,EAAC,8FAJG;UAKT,QAAQ;QALC;UAAA;UAAA;UAAA;QAAA,QAAb;MAAA;QAAA;QAAA;QAAA;MAAA,QATJ,eAiBQ;QAAQ,IAAI,EAAC,QAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAjBR;IAAA;MAAA;MAAA;MAAA;IAAA;EAFA;IAAA;IAAA;IAAA;EAAA,QADR;AAyBC;;GApCWL,S;UACKJ,W,EACAC,W;;;KAFLG,S;AAsChBA,SAAS,CAACiB,SAAV,GAAsB;EACpBC,YAAY,EAAEvB,SAAS,CAACwB;AADJ,CAAtB"},"metadata":{},"sourceType":"module"}