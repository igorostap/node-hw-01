{"ast":null,"code":"var _jsxFileName = \"/home/ihor/\\u0420\\u0430\\u0431\\u043E\\u0447\\u0438\\u0439 \\u0441\\u0442\\u043E\\u043B/goit-react-hw-07-phonebook/src/components/InputForm/InputForm.js\",\n    _s = $RefreshSig$();\n\nimport { InputItem } from './inputForm.styled';\nimport { Formik, Form } from 'formik';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from '../../Redux/ContactsSlice';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function InputForm() {\n  _s();\n\n  const contacts = useSelector(store => store.contacts.items);\n  const dispatch = useDispatch();\n\n  const onSubmit = (values, action) => {\n    const contName = contacts.find(el => el.name.toLowerCase() === values.name.toLowerCase());\n    if (contName) return alert(contName.name + ' is already in contacts');\n    values.id = nanoid();\n    dispatch(addContact(values));\n    action.resetForm();\n  };\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: {\n      name: '',\n      number: ''\n    },\n    onSubmit: onSubmit,\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Name\", /*#__PURE__*/_jsxDEV(InputItem, {\n          type: \"text\",\n          name: \"name\",\n          pattern: \"^[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]+(([' -][a-zA-Z\\u0430-\\u044F\\u0410-\\u042F ])?[a-zA-Z\\u0430-\\u044F\\u0410-\\u042F]*)*$\",\n          title: \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Number\", /*#__PURE__*/_jsxDEV(InputItem, {\n          type: \"tel\",\n          name: \"number\",\n          pattern: \"\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}\",\n          title: \"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Add contact\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InputForm, \"k1PFgZY3xE9F3u4VjgAv2j4HxqE=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = InputForm;\nInputForm.propTypes = {\n  submitHandle: PropTypes.func\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"InputForm\");","map":{"version":3,"names":["InputItem","Formik","Form","PropTypes","useSelector","useDispatch","addContact","nanoid","InputForm","contacts","store","items","dispatch","onSubmit","values","action","contName","find","el","name","toLowerCase","alert","id","resetForm","number","propTypes","submitHandle","func"],"sources":["/home/ihor/Рабочий стол/goit-react-hw-07-phonebook/src/components/InputForm/InputForm.js"],"sourcesContent":["import { InputItem } from './inputForm.styled';\nimport { Formik, Form } from 'formik';\nimport PropTypes from 'prop-types';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from '../../Redux/ContactsSlice';\nimport { nanoid } from 'nanoid';\n\nexport function InputForm() {\n  const contacts = useSelector(store => store.contacts.items);\n  const dispatch = useDispatch();\n\n  const onSubmit = (values, action) => {\n    const contName = contacts.find(\n      el => el.name.toLowerCase() === values.name.toLowerCase()\n    );\n    if (contName) return alert(contName.name + ' is already in contacts');\n    values.id = nanoid();\n    dispatch(addContact(values));\n    action.resetForm();\n  };\n  return (\n    <Formik initialValues={{ name: '', number: '' }} onSubmit={onSubmit}>\n      <Form>\n        <label>\n          Name\n          <InputItem\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </label>\n        <label>\n          Number\n          <InputItem\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </label>\n        <button type=\"submit\">Add contact</button>\n      </Form>\n    </Formik>\n  );\n}\n\nInputForm.propTypes = {\n  submitHandle: PropTypes.func,\n};\n"],"mappings":";;;AAAA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,OAAO,SAASC,SAAT,GAAqB;EAAA;;EAC1B,MAAMC,QAAQ,GAAGL,WAAW,CAACM,KAAK,IAAIA,KAAK,CAACD,QAAN,CAAeE,KAAzB,CAA5B;EACA,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;;EAEA,MAAMQ,QAAQ,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoB;IACnC,MAAMC,QAAQ,GAAGP,QAAQ,CAACQ,IAAT,CACfC,EAAE,IAAIA,EAAE,CAACC,IAAH,CAAQC,WAAR,OAA0BN,MAAM,CAACK,IAAP,CAAYC,WAAZ,EADjB,CAAjB;IAGA,IAAIJ,QAAJ,EAAc,OAAOK,KAAK,CAACL,QAAQ,CAACG,IAAT,GAAgB,yBAAjB,CAAZ;IACdL,MAAM,CAACQ,EAAP,GAAYf,MAAM,EAAlB;IACAK,QAAQ,CAACN,UAAU,CAACQ,MAAD,CAAX,CAAR;IACAC,MAAM,CAACQ,SAAP;EACD,CARD;;EASA,oBACE,QAAC,MAAD;IAAQ,aAAa,EAAE;MAAEJ,IAAI,EAAE,EAAR;MAAYK,MAAM,EAAE;IAApB,CAAvB;IAAiD,QAAQ,EAAEX,QAA3D;IAAA,uBACE,QAAC,IAAD;MAAA,wBACE;QAAA,gCAEE,QAAC,SAAD;UACE,IAAI,EAAC,MADP;UAEE,IAAI,EAAC,MAFP;UAGE,OAAO,EAAC,wHAHV;UAIE,KAAK,EAAC,wIAJR;UAKE,QAAQ;QALV;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAWE;QAAA,kCAEE,QAAC,SAAD;UACE,IAAI,EAAC,KADP;UAEE,IAAI,EAAC,QAFP;UAGE,OAAO,EAAC,wFAHV;UAIE,KAAK,EAAC,8FAJR;UAKE,QAAQ;QALV;UAAA;UAAA;UAAA;QAAA,QAFF;MAAA;QAAA;QAAA;QAAA;MAAA,QAXF,eAqBE;QAAQ,IAAI,EAAC,QAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QArBF;IAAA;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QADF;AA2BD;;GAxCeL,S;UACGJ,W,EACAC,W;;;KAFHG,S;AA0ChBA,SAAS,CAACiB,SAAV,GAAsB;EACpBC,YAAY,EAAEvB,SAAS,CAACwB;AADJ,CAAtB"},"metadata":{},"sourceType":"module"}